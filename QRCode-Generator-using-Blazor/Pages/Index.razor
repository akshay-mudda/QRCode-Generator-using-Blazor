@page "/"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime


<h1>QR Code Generator using Blazor</h1>

<div class="input-group mb-3">
    <input type="text" style="border-top-left-radius: 20px; border-bottom-left-radius: 20px;" class="form-control" id="inputData" @bind="inputText" placeholder="Enter data..." />
    <button class="btn btn-primary" style="background-color: mediumpurple; border-bottom-right-radius: 20px; border-top-right-radius: 20px;" @onclick="GenerateQRCode">
        Generate
    </button>
</div>

@if (showWarning && string.IsNullOrWhiteSpace(inputText))
{
    <div><label class="text-danger">Please enter the data in the input box</label></div>
}

<div class="fixed-box">
    @if (!string.IsNullOrWhiteSpace(qRCodeUrl))
    {
        <h4>Generated QR Code:</h4>
        <div style="max-width: 400px; max-height: 400px; overflow: hidden; border: 1px solid black;">
            <img src="@qRCodeUrl" alt="QR Code" style="width: 100%; height: 100%; object-fit: contain;" />
        </div>
    }
</div>

@if (!string.IsNullOrWhiteSpace(qRCodeUrl))
{
    <div class="mt-3">
        <button class="btn btn-success" @onclick="DownloadQRCode">Download QR Code</button>
    </div>
}


@code {
    private string inputText = "";
    private string qRCodeUrl = "";
    private bool showWarning = false;

    private async Task GenerateQRCode()
    {
        if (string.IsNullOrWhiteSpace(inputText))
        {
            showWarning = true;
            return;
        }

        showWarning = false;

        var client = new HttpClient();
        var response = await client.GetAsync($"http://localhost:5263/api/QRCode?data={inputText}");

        if (response.IsSuccessStatusCode)
        {
            var imageBytes = await response.Content.ReadAsByteArrayAsync();
            qRCodeUrl = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
        else
        {
            // Handle error
            // For example:
            qRCodeUrl = ""; // Clear previous QR code URL
            Console.WriteLine($"Error: {response.StatusCode}");
        }
    }

    private async Task DownloadQRCode()
    {
        if (string.IsNullOrWhiteSpace(qRCodeUrl))
        {
            return;
        }

        // Fetch the QR code image data using a base64-encoded data URI
        var imageDataUri = qRCodeUrl.Split(',')[1]; // Extract base64-encoded image data
        var imageBytes = Convert.FromBase64String(imageDataUri);

        // Invoke JavaScript function to initiate the download
        await JSRuntime.InvokeVoidAsync("saveAs", imageBytes, "QRCode.png");
    }

}



